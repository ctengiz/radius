// Code generated by radius-dict-gen. DO NOT EDIT.

package threegpp

import (
	"errors"
	"net"
	"strconv"

	"github.com/ctengiz/radius"
	"github.com/ctengiz/radius/rfc2865"
)

const (
	_ThreeGPP_VendorID = 10415
)

func _ThreeGPP_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_ThreeGPP_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _ThreeGPP_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ThreeGPP_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ThreeGPP_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _ThreeGPP_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ThreeGPP_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _ThreeGPP_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _ThreeGPP_AddVendor(p, typ, attr)
}

func _ThreeGPP_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ThreeGPP_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ThreeGPPIMSI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 1, a)
}

func ThreeGPPIMSI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 1, a)
}

func ThreeGPPIMSI_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPIMSI_Lookup(p)
	return
}

func ThreeGPPIMSI_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPIMSI_LookupString(p)
	return
}

func ThreeGPPIMSI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPIMSI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPIMSI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPIMSI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPIMSI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 1, a)
}

func ThreeGPPIMSI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 1, a)
}

func ThreeGPPIMSI_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 1)
}

type ThreeGPPChargingID uint32

var ThreeGPPChargingID_Strings = map[ThreeGPPChargingID]string{}

func (a ThreeGPPChargingID) String() string {
	if str, ok := ThreeGPPChargingID_Strings[a]; ok {
		return str
	}
	return "ThreeGPPChargingID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ThreeGPPChargingID_Add(p *radius.Packet, value ThreeGPPChargingID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ThreeGPP_AddVendor(p, 2, a)
}

func ThreeGPPChargingID_Get(p *radius.Packet) (value ThreeGPPChargingID) {
	value, _ = ThreeGPPChargingID_Lookup(p)
	return
}

func ThreeGPPChargingID_Gets(p *radius.Packet) (values []ThreeGPPChargingID, err error) {
	var i uint32
	for _, attr := range _ThreeGPP_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ThreeGPPChargingID(i))
	}
	return
}

func ThreeGPPChargingID_Lookup(p *radius.Packet) (value ThreeGPPChargingID, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ThreeGPPChargingID(i)
	return
}

func ThreeGPPChargingID_Set(p *radius.Packet, value ThreeGPPChargingID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ThreeGPP_SetVendor(p, 2, a)
}

func ThreeGPPChargingID_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 2)
}

type ThreeGPPPDPType uint32

var ThreeGPPPDPType_Strings = map[ThreeGPPPDPType]string{}

func (a ThreeGPPPDPType) String() string {
	if str, ok := ThreeGPPPDPType_Strings[a]; ok {
		return str
	}
	return "ThreeGPPPDPType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ThreeGPPPDPType_Add(p *radius.Packet, value ThreeGPPPDPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ThreeGPP_AddVendor(p, 3, a)
}

func ThreeGPPPDPType_Get(p *radius.Packet) (value ThreeGPPPDPType) {
	value, _ = ThreeGPPPDPType_Lookup(p)
	return
}

func ThreeGPPPDPType_Gets(p *radius.Packet) (values []ThreeGPPPDPType, err error) {
	var i uint32
	for _, attr := range _ThreeGPP_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ThreeGPPPDPType(i))
	}
	return
}

func ThreeGPPPDPType_Lookup(p *radius.Packet) (value ThreeGPPPDPType, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ThreeGPPPDPType(i)
	return
}

func ThreeGPPPDPType_Set(p *radius.Packet, value ThreeGPPPDPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ThreeGPP_SetVendor(p, 3, a)
}

func ThreeGPPPDPType_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 3)
}

func ThreeGPPCGAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 4, a)
}

func ThreeGPPCGAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = ThreeGPPCGAddress_Lookup(p)
	return
}

func ThreeGPPCGAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ThreeGPP_GetsVendor(p, 4) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPCGAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ThreeGPPCGAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 4, a)
}

func ThreeGPPCGAddress_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 4)
}

func ThreeGPPGPRSNegotiatedQoSProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 5, a)
}

func ThreeGPPGPRSNegotiatedQoSProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 5, a)
}

func ThreeGPPGPRSNegotiatedQoSProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPGPRSNegotiatedQoSProfile_Lookup(p)
	return
}

func ThreeGPPGPRSNegotiatedQoSProfile_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPGPRSNegotiatedQoSProfile_LookupString(p)
	return
}

func ThreeGPPGPRSNegotiatedQoSProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPGPRSNegotiatedQoSProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPGPRSNegotiatedQoSProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPGPRSNegotiatedQoSProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPGPRSNegotiatedQoSProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 5, a)
}

func ThreeGPPGPRSNegotiatedQoSProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 5, a)
}

func ThreeGPPGPRSNegotiatedQoSProfile_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 5)
}

func ThreeGPPSGSNAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 6, a)
}

func ThreeGPPSGSNAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = ThreeGPPSGSNAddress_Lookup(p)
	return
}

func ThreeGPPSGSNAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ThreeGPP_GetsVendor(p, 6) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPSGSNAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ThreeGPPSGSNAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 6, a)
}

func ThreeGPPSGSNAddress_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 6)
}

func ThreeGPPGGSNAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 7, a)
}

func ThreeGPPGGSNAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = ThreeGPPGGSNAddress_Lookup(p)
	return
}

func ThreeGPPGGSNAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ThreeGPP_GetsVendor(p, 7) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPGGSNAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ThreeGPPGGSNAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 7, a)
}

func ThreeGPPGGSNAddress_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 7)
}

func ThreeGPPIMSIMCCMNC_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 8, a)
}

func ThreeGPPIMSIMCCMNC_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 8, a)
}

func ThreeGPPIMSIMCCMNC_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPIMSIMCCMNC_Lookup(p)
	return
}

func ThreeGPPIMSIMCCMNC_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPIMSIMCCMNC_LookupString(p)
	return
}

func ThreeGPPIMSIMCCMNC_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPIMSIMCCMNC_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPIMSIMCCMNC_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPIMSIMCCMNC_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPIMSIMCCMNC_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 8, a)
}

func ThreeGPPIMSIMCCMNC_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 8, a)
}

func ThreeGPPIMSIMCCMNC_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 8)
}

func ThreeGPPGGSNMCCMNC_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 9, a)
}

func ThreeGPPGGSNMCCMNC_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 9, a)
}

func ThreeGPPGGSNMCCMNC_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPGGSNMCCMNC_Lookup(p)
	return
}

func ThreeGPPGGSNMCCMNC_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPGGSNMCCMNC_LookupString(p)
	return
}

func ThreeGPPGGSNMCCMNC_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPGGSNMCCMNC_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPGGSNMCCMNC_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPGGSNMCCMNC_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPGGSNMCCMNC_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 9, a)
}

func ThreeGPPGGSNMCCMNC_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 9, a)
}

func ThreeGPPGGSNMCCMNC_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 9)
}

func ThreeGPPNSAPI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 10, a)
}

func ThreeGPPNSAPI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 10, a)
}

func ThreeGPPNSAPI_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPNSAPI_Lookup(p)
	return
}

func ThreeGPPNSAPI_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPNSAPI_LookupString(p)
	return
}

func ThreeGPPNSAPI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPNSAPI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPNSAPI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPNSAPI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPNSAPI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 10, a)
}

func ThreeGPPNSAPI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 10, a)
}

func ThreeGPPNSAPI_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 10)
}

func ThreeGPPSessionStopIndicator_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_AddVendor(p, 11, a)
}

func ThreeGPPSessionStopIndicator_Get(p *radius.Packet) (value byte) {
	value, _ = ThreeGPPSessionStopIndicator_Lookup(p)
	return
}

func ThreeGPPSessionStopIndicator_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _ThreeGPP_GetsVendor(p, 11) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func ThreeGPPSessionStopIndicator_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func ThreeGPPSessionStopIndicator_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_SetVendor(p, 11, a)
}

func ThreeGPPSessionStopIndicator_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 11)
}

func ThreeGPPSelectionMode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 12, a)
}

func ThreeGPPSelectionMode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 12, a)
}

func ThreeGPPSelectionMode_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPSelectionMode_Lookup(p)
	return
}

func ThreeGPPSelectionMode_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPSelectionMode_LookupString(p)
	return
}

func ThreeGPPSelectionMode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPSelectionMode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPSelectionMode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPSelectionMode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPSelectionMode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 12, a)
}

func ThreeGPPSelectionMode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 12, a)
}

func ThreeGPPSelectionMode_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 12)
}

func ThreeGPPChargingCharacteristics_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 13, a)
}

func ThreeGPPChargingCharacteristics_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 13, a)
}

func ThreeGPPChargingCharacteristics_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPChargingCharacteristics_Lookup(p)
	return
}

func ThreeGPPChargingCharacteristics_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPChargingCharacteristics_LookupString(p)
	return
}

func ThreeGPPChargingCharacteristics_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPChargingCharacteristics_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPChargingCharacteristics_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPChargingCharacteristics_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPChargingCharacteristics_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 13, a)
}

func ThreeGPPChargingCharacteristics_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 13, a)
}

func ThreeGPPChargingCharacteristics_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 13)
}

func ThreeGPPCGIPv6Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 14, a)
}

func ThreeGPPCGIPv6Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = ThreeGPPCGIPv6Address_Lookup(p)
	return
}

func ThreeGPPCGIPv6Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ThreeGPP_GetsVendor(p, 14) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPCGIPv6Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func ThreeGPPCGIPv6Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 14, a)
}

func ThreeGPPCGIPv6Address_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 14)
}

func ThreeGPPSGSNIPv6Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 15, a)
}

func ThreeGPPSGSNIPv6Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = ThreeGPPSGSNIPv6Address_Lookup(p)
	return
}

func ThreeGPPSGSNIPv6Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ThreeGPP_GetsVendor(p, 15) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPSGSNIPv6Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func ThreeGPPSGSNIPv6Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 15, a)
}

func ThreeGPPSGSNIPv6Address_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 15)
}

func ThreeGPPGGSNIPv6Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 16, a)
}

func ThreeGPPGGSNIPv6Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = ThreeGPPGGSNIPv6Address_Lookup(p)
	return
}

func ThreeGPPGGSNIPv6Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ThreeGPP_GetsVendor(p, 16) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPGGSNIPv6Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func ThreeGPPGGSNIPv6Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 16, a)
}

func ThreeGPPGGSNIPv6Address_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 16)
}

func ThreeGPPIPv6DNSServers_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 17, a)
}

func ThreeGPPIPv6DNSServers_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 17, a)
}

func ThreeGPPIPv6DNSServers_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPIPv6DNSServers_Lookup(p)
	return
}

func ThreeGPPIPv6DNSServers_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPIPv6DNSServers_LookupString(p)
	return
}

func ThreeGPPIPv6DNSServers_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPIPv6DNSServers_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPIPv6DNSServers_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPIPv6DNSServers_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPIPv6DNSServers_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 17, a)
}

func ThreeGPPIPv6DNSServers_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 17, a)
}

func ThreeGPPIPv6DNSServers_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 17)
}

func ThreeGPPSGSNMCCMNC_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 18, a)
}

func ThreeGPPSGSNMCCMNC_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 18, a)
}

func ThreeGPPSGSNMCCMNC_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPSGSNMCCMNC_Lookup(p)
	return
}

func ThreeGPPSGSNMCCMNC_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPSGSNMCCMNC_LookupString(p)
	return
}

func ThreeGPPSGSNMCCMNC_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPSGSNMCCMNC_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPSGSNMCCMNC_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPSGSNMCCMNC_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPSGSNMCCMNC_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 18, a)
}

func ThreeGPPSGSNMCCMNC_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 18, a)
}

func ThreeGPPSGSNMCCMNC_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 18)
}

func ThreeGPPTeardownIndicator_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_AddVendor(p, 19, a)
}

func ThreeGPPTeardownIndicator_Get(p *radius.Packet) (value byte) {
	value, _ = ThreeGPPTeardownIndicator_Lookup(p)
	return
}

func ThreeGPPTeardownIndicator_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _ThreeGPP_GetsVendor(p, 19) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func ThreeGPPTeardownIndicator_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func ThreeGPPTeardownIndicator_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_SetVendor(p, 19, a)
}

func ThreeGPPTeardownIndicator_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 19)
}

func ThreeGPPIMEISV_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 20, a)
}

func ThreeGPPIMEISV_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 20, a)
}

func ThreeGPPIMEISV_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPIMEISV_Lookup(p)
	return
}

func ThreeGPPIMEISV_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPIMEISV_LookupString(p)
	return
}

func ThreeGPPIMEISV_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPIMEISV_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPIMEISV_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPIMEISV_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPIMEISV_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 20, a)
}

func ThreeGPPIMEISV_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 20, a)
}

func ThreeGPPIMEISV_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 20)
}

func ThreeGPPRATType_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_AddVendor(p, 21, a)
}

func ThreeGPPRATType_Get(p *radius.Packet) (value byte) {
	value, _ = ThreeGPPRATType_Lookup(p)
	return
}

func ThreeGPPRATType_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _ThreeGPP_GetsVendor(p, 21) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func ThreeGPPRATType_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func ThreeGPPRATType_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_SetVendor(p, 21, a)
}

func ThreeGPPRATType_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 21)
}

func ThreeGPPMSTimeZone_Add(p *radius.Packet, value []byte) (err error) {
	if len(value) != 2 {
		err = errors.New("invalid value length")
		return
	}
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 23, a)
}

func ThreeGPPMSTimeZone_AddString(p *radius.Packet, value string) (err error) {
	if len(value) != 2 {
		err = errors.New("invalid value length")
		return
	}
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 23, a)
}

func ThreeGPPMSTimeZone_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPMSTimeZone_Lookup(p)
	return
}

func ThreeGPPMSTimeZone_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPMSTimeZone_LookupString(p)
	return
}

func ThreeGPPMSTimeZone_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err == nil && len(i) != 2 {
			err = errors.New("invalid value length")
		}
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPMSTimeZone_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err == nil && len(i) != 2 {
			err = errors.New("invalid value length")
		}
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPMSTimeZone_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	if err == nil && len(value) != 2 {
		err = errors.New("invalid value length")
	}
	return
}

func ThreeGPPMSTimeZone_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	if err == nil && len(value) != 2 {
		err = errors.New("invalid value length")
	}
	return
}

func ThreeGPPMSTimeZone_Set(p *radius.Packet, value []byte) (err error) {
	if len(value) != 2 {
		err = errors.New("invalid value length")
		return
	}
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 23, a)
}

func ThreeGPPMSTimeZone_SetString(p *radius.Packet, value string) (err error) {
	if len(value) != 2 {
		err = errors.New("invalid value length")
		return
	}
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 23, a)
}

func ThreeGPPMSTimeZone_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 23)
}

func ThreeGPPCAMELChargingInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 24, a)
}

func ThreeGPPCAMELChargingInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 24, a)
}

func ThreeGPPCAMELChargingInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPCAMELChargingInfo_Lookup(p)
	return
}

func ThreeGPPCAMELChargingInfo_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPCAMELChargingInfo_LookupString(p)
	return
}

func ThreeGPPCAMELChargingInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPCAMELChargingInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPCAMELChargingInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPCAMELChargingInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPCAMELChargingInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 24, a)
}

func ThreeGPPCAMELChargingInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 24, a)
}

func ThreeGPPCAMELChargingInfo_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 24)
}

func ThreeGPPPacketFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 25, a)
}

func ThreeGPPPacketFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 25, a)
}

func ThreeGPPPacketFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPPacketFilter_Lookup(p)
	return
}

func ThreeGPPPacketFilter_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPPacketFilter_LookupString(p)
	return
}

func ThreeGPPPacketFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPPacketFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPPacketFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPPacketFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPPacketFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 25, a)
}

func ThreeGPPPacketFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 25, a)
}

func ThreeGPPPacketFilter_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 25)
}

func ThreeGPPNegotiatedDSCP_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_AddVendor(p, 26, a)
}

func ThreeGPPNegotiatedDSCP_Get(p *radius.Packet) (value byte) {
	value, _ = ThreeGPPNegotiatedDSCP_Lookup(p)
	return
}

func ThreeGPPNegotiatedDSCP_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _ThreeGPP_GetsVendor(p, 26) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func ThreeGPPNegotiatedDSCP_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func ThreeGPPNegotiatedDSCP_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_SetVendor(p, 26, a)
}

func ThreeGPPNegotiatedDSCP_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 26)
}

func ThreeGPPAllocateIPType_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_AddVendor(p, 27, a)
}

func ThreeGPPAllocateIPType_Get(p *radius.Packet) (value byte) {
	value, _ = ThreeGPPAllocateIPType_Lookup(p)
	return
}

func ThreeGPPAllocateIPType_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _ThreeGPP_GetsVendor(p, 27) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func ThreeGPPAllocateIPType_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func ThreeGPPAllocateIPType_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _ThreeGPP_SetVendor(p, 27, a)
}

func ThreeGPPAllocateIPType_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 27)
}

func TWANIdentifier_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 29, a)
}

func TWANIdentifier_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 29, a)
}

func TWANIdentifier_Get(p *radius.Packet) (value []byte) {
	value, _ = TWANIdentifier_Lookup(p)
	return
}

func TWANIdentifier_GetString(p *radius.Packet) (value string) {
	value, _ = TWANIdentifier_LookupString(p)
	return
}

func TWANIdentifier_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TWANIdentifier_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TWANIdentifier_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TWANIdentifier_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TWANIdentifier_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 29, a)
}

func TWANIdentifier_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 29, a)
}

func TWANIdentifier_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 29)
}

func ThreeGPPUserLocationInfoTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 30, a)
}

func ThreeGPPUserLocationInfoTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 30, a)
}

func ThreeGPPUserLocationInfoTime_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPUserLocationInfoTime_Lookup(p)
	return
}

func ThreeGPPUserLocationInfoTime_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPUserLocationInfoTime_LookupString(p)
	return
}

func ThreeGPPUserLocationInfoTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPUserLocationInfoTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPUserLocationInfoTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPUserLocationInfoTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPUserLocationInfoTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 30, a)
}

func ThreeGPPUserLocationInfoTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 30, a)
}

func ThreeGPPUserLocationInfoTime_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 30)
}

func ThreeGPPSecondaryRATUsage_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 31, a)
}

func ThreeGPPSecondaryRATUsage_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_AddVendor(p, 31, a)
}

func ThreeGPPSecondaryRATUsage_Get(p *radius.Packet) (value []byte) {
	value, _ = ThreeGPPSecondaryRATUsage_Lookup(p)
	return
}

func ThreeGPPSecondaryRATUsage_GetString(p *radius.Packet) (value string) {
	value, _ = ThreeGPPSecondaryRATUsage_LookupString(p)
	return
}

func ThreeGPPSecondaryRATUsage_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ThreeGPP_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPSecondaryRATUsage_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ThreeGPP_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ThreeGPPSecondaryRATUsage_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ThreeGPPSecondaryRATUsage_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ThreeGPP_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ThreeGPPSecondaryRATUsage_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 31, a)
}

func ThreeGPPSecondaryRATUsage_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ThreeGPP_SetVendor(p, 31, a)
}

func ThreeGPPSecondaryRATUsage_Del(p *radius.Packet) {
	_ThreeGPP_DelVendor(p, 31)
}
